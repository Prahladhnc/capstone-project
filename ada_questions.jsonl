{"instruction": "Generate a question for Unit 1 - Fundamentals of Algorithm Analysis: Definition of algorithm, Algorithmic Problem Solving, Framework for Analysis of algorithm efficiency, Asymptotic Notations, Mathematical Analysis of Non-recursive algorithms and Recursive algorithms. Brute Force: Bubble Sort, Selection Sort, String Matching.", "input": "", "output": "Explain different asymptotic notations used to represent the time complexities with suitable examples."}
{"instruction": "Generate a question for Unit 1 - Fundamentals of Algorithm Analysis: Definition of algorithm, Algorithmic Problem Solving, Framework for Analysis of algorithm efficiency, Asymptotic Notations, Mathematical Analysis of Non-recursive algorithms and Recursive algorithms. Brute Force: Bubble Sort, Selection Sort, String Matching.", "input": "", "output": "Outline selection sort and Bubble sort algorithms with example."}
{"instruction": "Generate a question for Unit 2 - Divide and Conquer: Mergesort, Quicksort, Strassen's matrix multiplication, Multiplication of large integers, Master's Theorem. Decrease and conquer: Depth First Search (DFS), Breadth First Search (BFS), Applications of DFS and BFS, Topological Sorting.", "input": "", "output": "Write the quick sort algorithm. Apply the same to sort the list {E, X, A, M, P, L, E} in alphabetical order."}
{"instruction": "Generate a question for Unit 2 - Divide and Conquer: Mergesort, Quicksort, Strassen's matrix multiplication, Multiplication of large integers, Master's Theorem. Decrease and conquer: Depth First Search (DFS), Breadth First Search (BFS), Applications of DFS and BFS, Topological Sorting.", "input": "", "output": "Apply source removal method to solve the following topological sorting problem."}
{"instruction": "Generate a question for Unit 2 - Divide and Conquer: Mergesort, Quicksort, Strassen's matrix multiplication, Multiplication of large integers, Master's Theorem. Decrease and conquer: Depth First Search (DFS), Breadth First Search (BFS), Applications of DFS and BFS, Topological Sorting.", "input": "", "output": "Find the BFS and DFS traversals starting from vertex 6 for the following Graph. Also, write the BFS and DFS Algorithms."}
{"instruction": "Generate a question for Unit 2 - Divide and Conquer: Mergesort, Quicksort, Strassen's matrix multiplication, Multiplication of large integers, Master's Theorem. Decrease and conquer: Depth First Search (DFS), Breadth First Search (BFS), Applications of DFS and BFS, Topological Sorting.", "input": "", "output": "Apply Merge sort algorithm to sort the numbers {14, 91, 07, 01, 10, 29, 08, 02}. Show the Merge call tree for the same."}
{"instruction": "Generate a question for Unit 3 - Greedy Technique: Prim's Algorithm, Dijkstra's Algorithm, Huffman trees. Dynamic Programming: Computing a Binomial Coefficient, Floyd's Algorithm, Knapsack Problem and Memory functions.", "input": "", "output": "Write the Prim’s algorithm. Apply Prim’s algorithm to the following graph. Start from vertex ‘a’."}
{"instruction": "Generate a question for Unit 3 - Greedy Technique: Prim's Algorithm, Dijkstra's Algorithm, Huffman trees. Dynamic Programming: Computing a Binomial Coefficient, Floyd's Algorithm, Knapsack Problem and Memory functions.", "input": "", "output": "Solve the following instance of Knapsack problem using dynamic programming. Knapsack Capacity M=10 Item 1 2 3 4 Weight 4 7 5 3 Profit 40 42 25 12"}
{"instruction": "Generate a question for Unit 3 - Greedy Technique: Prim's Algorithm, Dijkstra's Algorithm, Huffman trees. Dynamic Programming: Computing a Binomial Coefficient, Floyd's Algorithm, Knapsack Problem and Memory functions.", "input": "", "output": "Apply Floyd’s algorithm to find all pairs shortest path for the given adjacency matrix."}
{"instruction": "Generate a question for Unit 3 - Greedy Technique: Prim's Algorithm, Dijkstra's Algorithm, Huffman trees. Dynamic Programming: Computing a Binomial Coefficient, Floyd's Algorithm, Knapsack Problem and Memory functions.", "input": "", "output": "Using Dijkstra’s algorithm, trace the following graph to get shortest path from vertex ‘a’ to all other vertices. Also, write the algorithm."}
{"instruction": "Generate a question for Unit 4 - Space and Time Trade-offs: Boyer Moore Algorithm, Hashing. Transform and Conquer: Pre-sorting, AVL Trees, Heaps and Heapsort.", "input": "", "output": "Write the Heap Sort Algorithm. Show how the following numbers are sorted using Heap Sort {11, 44, 10, 65, 50, 6, 88, 3}."}
{"instruction": "Generate a question for Unit 4 - Space and Time Trade-offs: Boyer Moore Algorithm, Hashing. Transform and Conquer: Pre-sorting, AVL Trees, Heaps and Heapsort.", "input": "", "output": "For the input {30, 20, 56, 75, 31, 19} and hash function h(k)=k mod 11 i) Construct the closed hash table ii) Find the largest and average number of key comparisons in a successful search for hash table"}
{"instruction": "Generate a question for Unit 5 - Limitations of Algorithm Power: Basic concepts of P, NP and NP-Complete and NP – Hard Classes. Backtracking: N-queen’s problem, Sum of subset problem. Branch and bound: 0/1 Knapsack Problem, Assignment problem.", "input": "", "output": "Differentiate between NP Hard and NP Complete Problems."}
{"instruction": "Generate a question for Unit 5 - Limitations of Algorithm Power: Basic concepts of P, NP and NP-Complete and NP – Hard Classes. Backtracking: N-queen’s problem, Sum of subset problem. Branch and bound: 0/1 Knapsack Problem, Assignment problem.", "input": "", "output": "Find any one solution to 4-queens problem using backtracking. Draw the state-space tree."}
{"instruction": "Generate a question for Unit 5 - Limitations of Algorithm Power: Basic concepts of P, NP and NP-Complete and NP – Hard Classes. Backtracking: N-queen’s problem, Sum of subset problem. Branch and bound: 0/1 Knapsack Problem, Assignment problem.", "input": "", "output": "Obtain the optimal solution for the given job assignment problem using Branch and Bound method. JOB1 JOB2 JOB3 JOB4 Person A 9 2 7 8 Person B 6 4 3 7 Person C 5 8 1 8 Person D 7 6 9 4"}
{"instruction": "Generate a question for Unit 1 - Introduction to Algorithm, Fundamentals of Algorithmic Problem Solving. Analysis of Algorithm Efficiency: Analysis Framework, Asymptotic Notations and Basic Efficiency Classes, Mathematical Analysis of Non-Recursive Algorithms, Mathematical Analysis of Recursive Algorithms.", "input": "", "output": "By applying the steps in finding out the time complexity of non-recursive, find the time complexity for the following code: fun(a) { int x=0; for(i=1;<=n;i++) { for(j=1;j<=n;j++) { if(i==j) { x=x+a[i][j]; } } } printf(\"%d\",x);"}
{"instruction": "Generate a question for Unit 1 - Introduction to Algorithm, Fundamentals of Algorithmic Problem Solving. Analysis of Algorithm Efficiency: Analysis Framework, Asymptotic Notations and Basic Efficiency Classes, Mathematical Analysis of Non-Recursive Algorithms, Mathematical Analysis of Recursive Algorithms.", "input": "", "output": "Demonstrate with an example scenario the Worst case, Best case and Average case time complexity of an algorithm."}
{"instruction": "Generate a question for Unit 1 - Introduction to Algorithm, Fundamentals of Algorithmic Problem Solving. Analysis of Algorithm Efficiency: Analysis Framework, Asymptotic Notations and Basic Efficiency Classes, Mathematical Analysis of Non-Recursive Algorithms, Mathematical Analysis of Recursive Algorithms.", "input": "", "output": "Solve the following recurrence relation using backward substitution method: i. x(n)= x(n/2)+n for n>1, x(1)=1 ii. x(n)=x(n-1)+5 for n>1 and x(0)=0"}
{"instruction": "Generate a question for Unit 1 - Introduction to Algorithm, Fundamentals of Algorithmic Problem Solving. Analysis of Algorithm Efficiency: Analysis Framework, Asymptotic Notations and Basic Efficiency Classes, Mathematical Analysis of Non-Recursive Algorithms, Mathematical Analysis of Recursive Algorithms.", "input": "", "output": "Linear Search varies its time complexity for the best case and worst case. Justify your answer."}
{"instruction": "Generate a question for Unit 1 - Introduction to Algorithm, Fundamentals of Algorithmic Problem Solving. Analysis of Algorithm Efficiency: Analysis Framework, Asymptotic Notations and Basic Efficiency Classes, Mathematical Analysis of Non-Recursive Algorithms, Mathematical Analysis of Recursive Algorithms.", "input": "", "output": "Consider the following algorithm. Procedure Secret(A[0..n−1]) // Input: An arrayA[0..n−1] of integers minval←A[0]; maxval←A[0] fori←1 to n−1do if A[i]<minval minval←A[i] if A[i]>maxval maxval←A[i] return maxval−minval i. What does this algorithm compute? ii. What is its basic operation? iii. How many times is the basic operation executed? iv. Provide an exact expression for the running time T(n) of the algorithm. v. What is the order of T(n)?"}
{"instruction": "Generate a question for Unit 1 - Introduction to Algorithm, Fundamentals of Algorithmic Problem Solving. Analysis of Algorithm Efficiency: Analysis Framework, Asymptotic Notations and Basic Efficiency Classes, Mathematical Analysis of Non-Recursive Algorithms, Mathematical Analysis of Recursive Algorithms.", "input": "", "output": "Consider the following recursive algorithm computing the sum of the first n cubes S(n)=1 3 +2 3 +…n 3 Algorithm S(n) //Input: A positive integer n //Output: The sum of the first n cubes if n = 1 return 1 else return S(n − 1) + n * n * n Set up and solve a recurrence relation for the number of times the algorithm’s basic operation is executed."}
{"instruction": "Generate a question for Unit 2 - Brute-Force: String Matching, Exhaustive Search: Travelling Salesman Problem, Knapsack Problem, Assignment Problem. Decrease-and-Conquer: Topological Sorting, Algorithms for Generating Combinatorial Objects: Generating Permutations, Decrease by-a-Constant-Factor Algorithms: Russian Peasant Multiplication, Variable Size-Decrease Algorithms: Computing Median and the Selection Problem.", "input": "", "output": "Apply Decrease and Conquer technique to find Topological order for the following graph using DFS method and Source Removal method with the source vertex ‘1’:"}
{"instruction": "Generate a question for Unit 2 - Brute-Force: String Matching, Exhaustive Search: Travelling Salesman Problem, Knapsack Problem, Assignment Problem. Decrease-and-Conquer: Topological Sorting, Algorithms for Generating Combinatorial Objects: Generating Permutations, Decrease by-a-Constant-Factor Algorithms: Russian Peasant Multiplication, Variable Size-Decrease Algorithms: Computing Median and the Selection Problem.", "input": "", "output": "Determine the number of character comparisons made by the Brute-Force pattern matching algorithm in searching for the pattern “WOOD” in the text “TWO_ROADS_DIVERGED_IN_A_YELLOW_WOOD”. Also write an algorithm for the same and derive the best-case and worst-case time complexities."}
{"instruction": "Generate a question for Unit 2 - Brute-Force: String Matching, Exhaustive Search: Travelling Salesman Problem, Knapsack Problem, Assignment Problem. Decrease-and-Conquer: Topological Sorting, Algorithms for Generating Combinatorial Objects: Generating Permutations, Decrease by-a-Constant-Factor Algorithms: Russian Peasant Multiplication, Variable Size-Decrease Algorithms: Computing Median and the Selection Problem.", "input": "", "output": "Johnson Trotter is an efficient method to generate the permutations? Justify your answer with an example."}
{"instruction": "Generate a question for Unit 2 - Brute-Force: String Matching, Exhaustive Search: Travelling Salesman Problem, Knapsack Problem, Assignment Problem. Decrease-and-Conquer: Topological Sorting, Algorithms for Generating Combinatorial Objects: Generating Permutations, Decrease by-a-Constant-Factor Algorithms: Russian Peasant Multiplication, Variable Size-Decrease Algorithms: Computing Median and the Selection Problem.", "input": "", "output": "You are given an unsorted list of distinct integers: [12, 3, 5, 7, 19, 26, 1, 8]. Use decrease and conquer algorithm to demonstrate the finding of 3rd smallest element in the list. Write the algorithm for the same."}
{"instruction": "Generate a question for Unit 2 - Brute-Force: String Matching, Exhaustive Search: Travelling Salesman Problem, Knapsack Problem, Assignment Problem. Decrease-and-Conquer: Topological Sorting, Algorithms for Generating Combinatorial Objects: Generating Permutations, Decrease by-a-Constant-Factor Algorithms: Russian Peasant Multiplication, Variable Size-Decrease Algorithms: Computing Median and the Selection Problem.", "input": "", "output": "Discuss the advantages and Disadvantages of Brute force technique. Apply Brute force technique to list all tours starting from city p and find the shortest among them."}
{"instruction": "Generate a question for Unit 2 - Brute-Force: String Matching, Exhaustive Search: Travelling Salesman Problem, Knapsack Problem, Assignment Problem. Decrease-and-Conquer: Topological Sorting, Algorithms for Generating Combinatorial Objects: Generating Permutations, Decrease by-a-Constant-Factor Algorithms: Russian Peasant Multiplication, Variable Size-Decrease Algorithms: Computing Median and the Selection Problem.", "input": "", "output": "Demonstrate the multiplication of two n digit numbers using decrease by constant factor technique. Apply the same to multiply the numbers 85*18."}
{"instruction": "Generate a question for Unit 3 - Divide-and-Conquer: Merge Sort, Quicksort, Multiplication of Long Integers and Strassen’s Matrix Multiplication. Transform-and-Conquer: Presorting, Heaps and Heap sort, Horner’s Rule. Space and Time Tradeoffs: Horspool’s Algorithm, Boyer-Moore Algorithm.", "input": "", "output": "Is merge sort is better than quick sort in the worst case? justify your answer by deriving the time complexities for both in worst case."}
{"instruction": "Generate a question for Unit 3 - Divide-and-Conquer: Merge Sort, Quicksort, Multiplication of Long Integers and Strassen’s Matrix Multiplication. Transform-and-Conquer: Presorting, Heaps and Heap sort, Horner’s Rule. Space and Time Tradeoffs: Horspool’s Algorithm, Boyer-Moore Algorithm.", "input": "", "output": "Create a min heap tree for the following list of elements and sort an array: {58, 25, 35, 38, 110, 48, 18}"}
{"instruction": "Generate a question for Unit 3 - Divide-and-Conquer: Merge Sort, Quicksort, Multiplication of Long Integers and Strassen’s Matrix Multiplication. Transform-and-Conquer: Presorting, Heaps and Heap sort, Horner’s Rule. Space and Time Tradeoffs: Horspool’s Algorithm, Boyer-Moore Algorithm.", "input": "", "output": "Apply Divide and Conquer technique to multiply the following two long integers: 2547 and 1605"}
{"instruction": "Generate a question for Unit 3 - Divide-and-Conquer: Merge Sort, Quicksort, Multiplication of Long Integers and Strassen’s Matrix Multiplication. Transform-and-Conquer: Presorting, Heaps and Heap sort, Horner’s Rule. Space and Time Tradeoffs: Horspool’s Algorithm, Boyer-Moore Algorithm.", "input": "", "output": "For the given array, write an algorithm to determine mode using the concept of presorting and analyze its time complexity."}
{"instruction": "Generate a question for Unit 3 - Divide-and-Conquer: Merge Sort, Quicksort, Multiplication of Long Integers and Strassen’s Matrix Multiplication. Transform-and-Conquer: Presorting, Heaps and Heap sort, Horner’s Rule. Space and Time Tradeoffs: Horspool’s Algorithm, Boyer-Moore Algorithm.", "input": "", "output": "Construct Merge Sort tree to sort the following list of elements in the ascending order: {10,34,22,11,54,66,33,24,25,56,77,21}"}
{"instruction": "Generate a question for Unit 3 - Divide-and-Conquer: Merge Sort, Quicksort, Multiplication of Long Integers and Strassen’s Matrix Multiplication. Transform-and-Conquer: Presorting, Heaps and Heap sort, Horner’s Rule. Space and Time Tradeoffs: Horspool’s Algorithm, Boyer-Moore Algorithm.", "input": "", "output": "Apply Stressen’s matrix multiplication to multiply the following two matrices. 1 2 3 4 2 5 7 9 3 4 7 8 1 3 5 7 5 6 1 2 3 4 5 6 1 2 3 4 5 6 7 8"}
{"instruction": "Generate a question for Unit 4 - Dynamic Programming: Coin Problem, The Knapsack Problem, Warshall’s Algorithm, Floyd’s Algorithms. Greedy Technique: Prim’s Algorithm, Kruskal’s Algorithm, Dijkstra’s Algorithm, Huffman Trees, Fractional Knapsack Problem.", "input": "", "output": "Several chocolates are placed in cells of an n × m board, no more than one chocolate per cell. A kid is standing at the upper left cell of the board, needs to collect as many of the chocolates as possible and bring them to the bottom right cell. On each step, the kid can move either one cell to the right or one cell down from its current location. When the kid visits a cell with a chocolate, he/she always picks up that chocolate. Find the maximum number of chocolates that the kid can collect and a path it needs to follow to do this. 1 2 3 4 5 6 1 Chocolate 2 Chocolate Chocolate Chocolate 3 Chocolate Chocolate 4 Chocolate Chocolate 5 Chocolate Chocolate"}
{"instruction": "Generate a question for Unit 4 - Dynamic Programming: Coin Problem, The Knapsack Problem, Warshall’s Algorithm, Floyd’s Algorithms. Greedy Technique: Prim’s Algorithm, Kruskal’s Algorithm, Dijkstra’s Algorithm, Huffman Trees, Fractional Knapsack Problem.", "input": "", "output": "Apply Kruskal's algorithm to find minimum spanning tree for the following graph. Show the steps completely."}
{"instruction": "Generate a question for Unit 4 - Dynamic Programming: Coin Problem, The Knapsack Problem, Warshall’s Algorithm, Floyd’s Algorithms. Greedy Technique: Prim’s Algorithm, Kruskal’s Algorithm, Dijkstra’s Algorithm, Huffman Trees, Fractional Knapsack Problem.", "input": "", "output": "Explain Spanning tree and Minimum Spanning tree with an example."}
{"instruction": "Generate a question for Unit 4 - Dynamic Programming: Coin Problem, The Knapsack Problem, Warshall’s Algorithm, Floyd’s Algorithms. Greedy Technique: Prim’s Algorithm, Kruskal’s Algorithm, Dijkstra’s Algorithm, Huffman Trees, Fractional Knapsack Problem.", "input": "", "output": "Solve the 0/1 Knapsack problem for the following data using Dynamic programming technique. Find the objects selected for an optimal solution. Also write an algorithm for the same. Number of objects n=5, Knapsack Capacity=6 Item No. Profit Weight 1 25 3 2 20 2 3 15 1 4 40 4 5 50 5"}
{"instruction": "Generate a question for Unit 4 - Dynamic Programming: Coin Problem, The Knapsack Problem, Warshall’s Algorithm, Floyd’s Algorithms. Greedy Technique: Prim’s Algorithm, Kruskal’s Algorithm, Dijkstra’s Algorithm, Huffman Trees, Fractional Knapsack Problem.", "input": "", "output": "Apply Dijkstra’s algorithm to find shortest path from the vertex ‘A’ to all other vertices for the following graph:"}
{"instruction": "Generate a question for Unit 4 - Dynamic Programming: Coin Problem, The Knapsack Problem, Warshall’s Algorithm, Floyd’s Algorithms. Greedy Technique: Prim’s Algorithm, Kruskal’s Algorithm, Dijkstra’s Algorithm, Huffman Trees, Fractional Knapsack Problem.", "input": "", "output": "Differentiate between Floyd’s algorithm and Dijkstra’s algorithm with an example."}
{"instruction": "Generate a question for Unit 5 - Backtracking: n-Queens Problem, Subset-Sum Problem. Branch-and-Bound: Knapsack Problem, Traveling Salesman Problem. NP-Completeness: Polynomial time, Polynomial-time verification, NP-completeness and reducibility. NP-Complete Problems: The Clique problem, The Vertex Cover problem.", "input": "", "output": "Distinguish between P, NP and NP completeness problem."}
{"instruction": "Generate a question for Unit 5 - Backtracking: n-Queens Problem, Subset-Sum Problem. Branch-and-Bound: Knapsack Problem, Traveling Salesman Problem. NP-Completeness: Polynomial time, Polynomial-time verification, NP-completeness and reducibility. NP-Complete Problems: The Clique problem, The Vertex Cover problem.", "input": "", "output": "Apply Backtracking technique to find Sum of Subsets for a set S= {12, 16, 27, 43} and M=55. Represent the complete state space tree for finding all possible subsets."}
{"instruction": "Generate a question for Unit 5 - Backtracking: n-Queens Problem, Subset-Sum Problem. Branch-and-Bound: Knapsack Problem, Traveling Salesman Problem. NP-Completeness: Polynomial time, Polynomial-time verification, NP-completeness and reducibility. NP-Complete Problems: The Clique problem, The Vertex Cover problem.", "input": "", "output": "Apply Branch and Bound approach to solve the Knapsack problem for the following data: Number objects n=4, Knapsack Capacity M=10 Item No. Profit Weight 1 40 4 2 42 7 3 25 5 4 12 3"}
{"instruction": "Generate a question for Unit 5 - Backtracking: n-Queens Problem, Subset-Sum Problem. Branch-and-Bound: Knapsack Problem, Traveling Salesman Problem. NP-Completeness: Polynomial time, Polynomial-time verification, NP-completeness and reducibility. NP-Complete Problems: The Clique problem, The Vertex Cover problem.", "input": "", "output": "Explain n-queens problem and its solution using backtracking with an example."}
{"instruction": "Generate a question for Unit 5 - Backtracking: n-Queens Problem, Subset-Sum Problem. Branch-and-Bound: Knapsack Problem, Traveling Salesman Problem. NP-Completeness: Polynomial time, Polynomial-time verification, NP-completeness and reducibility. NP-Complete Problems: The Clique problem, The Vertex Cover problem.", "input": "", "output": "Convert below 3CNF to clique problem and also find solution for the same. Show the steps."}
{"instruction": "Generate a question for Unit 5 - Backtracking: n-Queens Problem, Subset-Sum Problem. Branch-and-Bound: Knapsack Problem, Traveling Salesman Problem. NP-Completeness: Polynomial time, Polynomial-time verification, NP-completeness and reducibility. NP-Complete Problems: The Clique problem, The Vertex Cover problem.", "input": "", "output": "Describe branch and bound solution to travelling Salesman problem with example."}
{"instruction": "Generate a question for Unit 1 - Introduction to Algorithm: Fundamentals of Algorithmic Problem Solving. Analysis of Algorithm Efficiency: The Analysis Framework, Asymptotic Notations and Basic Efficiency Classes, Mathematical Analysis of Non Recursive Algorithm, Mathematical Analysis of Recursive Algorithms.", "input": "", "output": "Describe Asymptotic notations with an example, equation and graph."}
{"instruction": "Generate a question for Unit 1 - Introduction to Algorithm: Fundamentals of Algorithmic Problem Solving. Analysis of Algorithm Efficiency: The Analysis Framework, Asymptotic Notations and Basic Efficiency Classes, Mathematical Analysis of Non Recursive Algorithm, Mathematical Analysis of Recursive Algorithms.", "input": "", "output": "Design a recursive algorithm to find maximum and minimum element in an array and derive its time complexity."}
{"instruction": "Generate a question for Unit 1 - Introduction to Algorithm: Fundamentals of Algorithmic Problem Solving. Analysis of Algorithm Efficiency: The Analysis Framework, Asymptotic Notations and Basic Efficiency Classes, Mathematical Analysis of Non Recursive Algorithm, Mathematical Analysis of Recursive Algorithms.", "input": "", "output": "Analyze the code given below and find the time complexity: void function (int n) { int count = 0; for (int i=n/2; i<=n; i++) for (int j=1; j<=n; j = 2 * j) for (int k=1; k<=n; k = k * 2) count++; }"}
{"instruction": "Generate a question for Unit 2 - Brute-Force: String Matching, Exhaustive Search: TSP, Knapsack Problem, Assignment Problem, Depth-First Search and Breadth-First Search. Decrease-and-Conquer: Topological Sorting, Algorithms for Generating Combinatorial Objects: Generating Permutations, Decrease by-a-ConstantFactor Algorithms: Binary Search, Russian Peasant Multiplication, Variable Size-Decrease Algorithms: Computing Median and the Selection Problem.", "input": "", "output": "Mention the applications of Depth First Search (DFS) algorithm. Apply DFS method to find the topological sequence for the graph shown below. Also write an algorithm for the same."}
{"instruction": "Generate a question for Unit 2 - Brute-Force: String Matching, Exhaustive Search: TSP, Knapsack Problem, Assignment Problem, Depth-First Search and Breadth-First Search. Decrease-and-Conquer: Topological Sorting, Algorithms for Generating Combinatorial Objects: Generating Permutations, Decrease by-a-ConstantFactor Algorithms: Binary Search, Russian Peasant Multiplication, Variable Size-Decrease Algorithms: Computing Median and the Selection Problem.", "input": "", "output": "Solve the following assignment problem using Exhaustive Search technique, whose matrix for assigning four jobs to four persons are given:"}
{"instruction": "Generate a question for Unit 2 - Brute-Force: String Matching, Exhaustive Search: TSP, Knapsack Problem, Assignment Problem, Depth-First Search and Breadth-First Search. Decrease-and-Conquer: Topological Sorting, Algorithms for Generating Combinatorial Objects: Generating Permutations, Decrease by-a-ConstantFactor Algorithms: Binary Search, Russian Peasant Multiplication, Variable Size-Decrease Algorithms: Computing Median and the Selection Problem.", "input": "", "output": "Demonstrate with an example Brute Force pattern matching technique. Write an algorithm for the same and find its time complexity."}
{"instruction": "Generate a question for Unit 2 - Brute-Force: String Matching, Exhaustive Search: TSP, Knapsack Problem, Assignment Problem, Depth-First Search and Breadth-First Search. Decrease-and-Conquer: Topological Sorting, Algorithms for Generating Combinatorial Objects: Generating Permutations, Decrease by-a-ConstantFactor Algorithms: Binary Search, Russian Peasant Multiplication, Variable Size-Decrease Algorithms: Computing Median and the Selection Problem.", "input": "", "output": "Write a program to check whether a particular given node is reachable from a given source node using DFS traversal technique. If yes, print 'Node is accessible', otherwise print 'Node is not accessible'."}
{"instruction": "Generate a question for Unit 3 - Divide-and-Conquer: Merge sort, Quicksort, Multiplication of Large Integers and Strassen’s Matrix Multiplication. Transform-and-Conquer: Presorting, Heaps and Heap sort, Horner’s Rule. Space and Time Tradeoffs: Horspool Algorithm, Boyer-Moore Algorithm.", "input": "", "output": "Apply Merge sort to sort the list {E, X, A, M, P, L, E} in alphabetical order."}
{"instruction": "Generate a question for Unit 3 - Divide-and-Conquer: Merge sort, Quicksort, Multiplication of Large Integers and Strassen’s Matrix Multiplication. Transform-and-Conquer: Presorting, Heaps and Heap sort, Horner’s Rule. Space and Time Tradeoffs: Horspool Algorithm, Boyer-Moore Algorithm.", "input": "", "output": "Construct a Max Heap for the following list of keys and sort the list using Heap Sort technique. Write the algorithm for Max Heap. {2,9,7,6,5,8}"}
{"instruction": "Generate a question for Unit 3 - Divide-and-Conquer: Merge sort, Quicksort, Multiplication of Large Integers and Strassen’s Matrix Multiplication. Transform-and-Conquer: Presorting, Heaps and Heap sort, Horner’s Rule. Space and Time Tradeoffs: Horspool Algorithm, Boyer-Moore Algorithm.", "input": "", "output": "State Horner’s rule with an algorithm. Apply Horner’s rule to evaluate the following polynomial: 5x^4 + 2x^3 – 3x^2 + x -7 at the point x=3."}
{"instruction": "Generate a question for Unit 3 - Divide-and-Conquer: Merge sort, Quicksort, Multiplication of Large Integers and Strassen’s Matrix Multiplication. Transform-and-Conquer: Presorting, Heaps and Heap sort, Horner’s Rule. Space and Time Tradeoffs: Horspool Algorithm, Boyer-Moore Algorithm.", "input": "", "output": "Demonstrate the Strassen’s Matrix Multiplication method with an example."}
{"instruction": "Generate a question for Unit 4 - Dynamic Programming: Coin Problem, The Knapsack Problem, Warshall’s and Floyd’s Algorithms. Greedy Technique: Prim’s Algorithm, Kruskal’s Algorithm-Without disjoint subsets and Union Find algorithms, Dijkstra’s Algorithm, Huffman Trees.", "input": "", "output": "Analyze time efficiency of Prim’s algorithm. Apply Prim’s algorithm to find the minimum cost spanning tree for the graph shown below:"}
{"instruction": "Generate a question for Unit 4 - Dynamic Programming: Coin Problem, The Knapsack Problem, Warshall’s and Floyd’s Algorithms. Greedy Technique: Prim’s Algorithm, Kruskal’s Algorithm-Without disjoint subsets and Union Find algorithms, Dijkstra’s Algorithm, Huffman Trees.", "input": "", "output": "Construct a Huffman tree and find the code word for the following data: Using above code, Encode the text DAD_CBE and decode the text 1000010111001010. Character A B C D E - Frequency 0.5 0.35 0.5 0.1 0.4 0.2"}
{"instruction": "Generate a question for Unit 5 - Backtracking: n-Queens Problem, Subset-Sum Problem. Branch-andBound: Knapsack Problem, Traveling Salesman Problem. NP-Completeness: Polynomial time, Polynomial-time verification, NPcompleteness and reducibility. NP-Complete Problems: The Clique problem, The Vertex Cover problem, Approximation Algorithms: The Vertex-Cover problem.", "input": "", "output": "Solve the following instance of 0/1 Knapsack problem using Branch and Bound with capacity C=10. Items={1,2,3,4} Weights={4,7,5,3} Values={$40, $42, $25,$12}"}
{"instruction": "Generate a question for Unit 5 - Backtracking: n-Queens Problem, Subset-Sum Problem. Branch-andBound: Knapsack Problem, Traveling Salesman Problem. NP-Completeness: Polynomial time, Polynomial-time verification, NPcompleteness and reducibility. NP-Complete Problems: The Clique problem, The Vertex Cover problem, Approximation Algorithms: The Vertex-Cover problem.", "input": "", "output": "Describe the P and NP class problems with examples. Illustrate NP Completeness proof by Reduction."}