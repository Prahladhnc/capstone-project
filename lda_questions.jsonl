{"instruction": "Generate a question for Unit 1: Basics of Gates and Combinational Logic Circuits. Topics include: Review of Basic Logic gates, Positive and Negative Logic, Sum-of-Products Method, Truth Table to Karnaugh Map, Pairs, Quads, and Octets, Karnaugh Simplifications, Don’t-care Conditions, Product-of-Sums Method, Product-of-Sums simplifications, Simplification by Quine-McClusky Method, Multiplexers, Demultiplexers, 1-of-16 Decoder, Exclusive-or Gates, Encoders, Parity Generators", "input": "", "output": "Prove the following:\ni) x?y?z?+x?y?z+x?yz+xy?z+xyz=x?y?+z\nii)w?y?z?+wz+y?z+xyz=w?y?+wz+xz"}
{"instruction": "Generate a question for Unit 1: Basics of Gates and Combinational Logic Circuits. Topics include: Review of Basic Logic gates, Positive and Negative Logic, Sum-of-Products Method, Truth Table to Karnaugh Map, Pairs, Quads, and Octets, Karnaugh Simplifications, Don’t-care Conditions, Product-of-Sums Method, Product-of-Sums simplifications, Simplification by Quine-McClusky Method, Multiplexers, Demultiplexers, 1-of-16 Decoder, Exclusive-or Gates, Encoders, Parity Generators", "input": "", "output": "Simplify and Realize the following Boolean function using NAND gates only.\nf( a,b,c,d)= ?m(0, 6, 8, 9, 10, 11, 13, 14, 15)"}
{"instruction": "Generate a question for Unit 1: Basics of Gates and Combinational Logic Circuits. Topics include: Review of Basic Logic gates, Positive and Negative Logic, Sum-of-Products Method, Truth Table to Karnaugh Map, Pairs, Quads, and Octets, Karnaugh Simplifications, Don’t-care Conditions, Product-of-Sums Method, Product-of-Sums simplifications, Simplification by Quine-McClusky Method, Multiplexers, Demultiplexers, 1-of-16 Decoder, Exclusive-or Gates, Encoders, Parity Generators", "input": "", "output": "Simplify the following function using K-Map in SOP and POS form.\nf(w,x,y,z)= ?m(1,3,4,5,6,7,11,14,15)"}
{"instruction": "Generate a question for Unit 1: Basics of Gates and Combinational Logic Circuits. Topics include: Review of Basic Logic gates, Positive and Negative Logic, Sum-of-Products Method, Truth Table to Karnaugh Map, Pairs, Quads, and Octets, Karnaugh Simplifications, Don’t-care Conditions, Product-of-Sums Method, Product-of-Sums simplifications, Simplification by Quine-McClusky Method, Multiplexers, Demultiplexers, 1-of-16 Decoder, Exclusive-or Gates, Encoders, Parity Generators", "input": "", "output": "Using Quine McClusky method obtain the essential prime implicants for the expression given and also write the simplified expression for the same.\nf(w,x,y,z)= ?m(1,3,5,6,7,13,14) + dc (8,10,12)"}
{"instruction": "Generate a question for Unit 1: Basics of Gates and Combinational Logic Circuits. Topics include: Review of Basic Logic gates, Positive and Negative Logic, Sum-of-Products Method, Truth Table to Karnaugh Map, Pairs, Quads, and Octets, Karnaugh Simplifications, Don’t-care Conditions, Product-of-Sums Method, Product-of-Sums simplifications, Simplification by Quine-McClusky Method, Multiplexers, Demultiplexers, 1-of-16 Decoder, Exclusive-or Gates, Encoders, Parity Generators", "input": "", "output": "Simplify the expression given below using K-maps and realize the simplified expression using basic gates:\nf(a,b,c,d) = ?M (2,4,6,9,11,15) +dc(5,10,13,14)"}
{"instruction": "Generate a question for Unit 1: Basics of Gates and Combinational Logic Circuits. Topics include: Review of Basic Logic gates, Positive and Negative Logic, Sum-of-Products Method, Truth Table to Karnaugh Map, Pairs, Quads, and Octets, Karnaugh Simplifications, Don’t-care Conditions, Product-of-Sums Method, Product-of-Sums simplifications, Simplification by Quine-McClusky Method, Multiplexers, Demultiplexers, 1-of-16 Decoder, Exclusive-or Gates, Encoders, Parity Generators", "input": "", "output": "What is static 0 hazard and how it can be eliminated?"}
{"instruction": "Generate a question for Unit 1: Basics of Gates and Combinational Logic Circuits. Topics include: Review of Basic Logic gates, Positive and Negative Logic, Sum-of-Products Method, Truth Table to Karnaugh Map, Pairs, Quads, and Octets, Karnaugh Simplifications, Don’t-care Conditions, Product-of-Sums Method, Product-of-Sums simplifications, Simplification by Quine-McClusky Method, Multiplexers, Demultiplexers, 1-of-16 Decoder, Exclusive-or Gates, Encoders, Parity Generators", "input": "", "output": "Analyze the given Truth Table. Reduce it to SOP and draw the logic diagram.\nX Y Z f\n0 0 0 1\n0 0 1 1\n0 1 0 1\n0 1 1 0\n1 0 0 1\n1 0 1 0\n1 1 0 1\n1 1 1 1"}
{"instruction": "Generate a question for Unit 1: Basics of Gates and Combinational Logic Circuits. Topics include: Review of Basic Logic gates, Positive and Negative Logic, Sum-of-Products Method, Truth Table to Karnaugh Map, Pairs, Quads, and Octets, Karnaugh Simplifications, Don’t-care Conditions, Product-of-Sums Method, Product-of-Sums simplifications, Simplification by Quine-McClusky Method, Multiplexers, Demultiplexers, 1-of-16 Decoder, Exclusive-or Gates, Encoders, Parity Generators", "input": "", "output": "Given the Boolean function, determine a minimal sum and minimal product using K-maps where w, x, y, z are variables. f(w, x, y, z) = ?m (2,3,4,10,13,14,15) + dc (7,9,11)"}
{"instruction": "Generate a question for Unit 1: Basics of Gates and Combinational Logic Circuits. Topics include: Review of Basic Logic gates, Positive and Negative Logic, Sum-of-Products Method, Truth Table to Karnaugh Map, Pairs, Quads, and Octets, Karnaugh Simplifications, Don’t-care Conditions, Product-of-Sums Method, Product-of-Sums simplifications, Simplification by Quine-McClusky Method, Multiplexers, Demultiplexers, 1-of-16 Decoder, Exclusive-or Gates, Encoders, Parity Generators", "input": "", "output": "Using Quine McClusky method obtain the essential prime implicants for the expression given below.\nf (A, B, C, D) = ?m (0,2,3,6,7,8,10,12,13)"}
{"instruction": "Generate a question for Unit 1: Basics of Gates and Combinational Logic Circuits. Topics include: Review of Basic Logic gates, Positive and Negative Logic, Sum-of-Products Method, Truth Table to Karnaugh Map, Pairs, Quads, and Octets, Karnaugh Simplifications, Don’t-care Conditions, Product-of-Sums Method, Product-of-Sums simplifications, Simplification by Quine-McClusky Method, Multiplexers, Demultiplexers, 1-of-16 Decoder, Exclusive-or Gates, Encoders, Parity Generators", "input": "", "output": "Design a SOP circuit which accepts 3 inputs a, b and c and outputs a 1(HIGH) when input has exactly two 1’s."}
{"instruction": "Generate a question for Unit 1: Basics of Gates and Combinational Logic Circuits. Topics include: Review of Basic Logic gates, Positive and Negative Logic, Sum-of-Products Method, Truth Table to Karnaugh Map, Pairs, Quads, and Octets, Karnaugh Simplifications, Don’t-care Conditions, Product-of-Sums Method, Product-of-Sums simplifications, Simplification by Quine-McClusky Method, Multiplexers, Demultiplexers, 1-of-16 Decoder, Exclusive-or Gates, Encoders, Parity Generators", "input": "", "output": "Given the Boolean function, determine a minimal sum and minimal product using K-maps where w, x, y, z are variables.\nf (w, x, y, z) = ?M (0,1,2,4,10,11,15) + dc (3,8,9)"}
{"instruction": "Generate a question for Unit 1: Basics of Gates and Combinational Logic Circuits. Topics include: Review of Basic Logic gates, Positive and Negative Logic, Sum-of-Products Method, Truth Table to Karnaugh Map, Pairs, Quads, and Octets, Karnaugh Simplifications, Don’t-care Conditions, Product-of-Sums Method, Product-of-Sums simplifications, Simplification by Quine-McClusky Method, Multiplexers, Demultiplexers, 1-of-16 Decoder, Exclusive-or Gates, Encoders, Parity Generators", "input": "", "output": "Simplify f(w,x,y,z)=?m(0,5,6,7,9,10,13,14,15) using Quine McCluskey method."}
{"instruction": "Generate a question for Unit 2: Arithmetic Circuits. Topics include: Half Adder, Full Adder, Parallel Adder, Subtractors, Multiplexer-based Adder/Subtractor, Binary Subtraction, Two's Complement Representation", "input": "", "output": "Assume an adder/subtractor which is capable of handling two 4-bit operands. For each of the following set of unsigned operands, X & Y, and control input Add/Sub, determine the output. Check your answers by converting the binary numbers into decimal.\ni) X=0101, Y=0011, Add/Sub=0\nii) X=0101, Y=0011, Add/Sub=1\nDraw the logic diagram using parallel binary adder/subtractor using X-OR gate."}
{"instruction": "Generate a question for Unit 2: Arithmetic Circuits and Digital Logic Design. Topics include: Decoders, Multiplexers, Priority Encoders, Programmable Logic Arrays (PLAs), Implementing Boolean Functions using MUX and Decoder", "input": "", "output": "Realize each of the following Boolean expressions:\n i) using an 8-to-1 line multiplexer where w, x, and y appear on select lines S2, S1, and S0 respectively.\nf(w,x,y,z)= ?m(0,4,6,8,9,11,13,14)\nii) using 4-to-1 line multiplexer and external gates implement\nf(w,x,y,z)= ?m(4,5,7,8,10,12,15)\nLet w and x appear on the select lines S1 and S0 respectively."}
{"instruction": "Generate a question for Unit 2: Arithmetic Circuits and Digital Logic Design. Topics include: Decoders, Multiplexers, Priority Encoders, Programmable Logic Arrays (PLAs), Implementing Boolean Functions using MUX and Decoder", "input": "", "output": "Analyse the truth table given below for a Boolean function where A, B, C are the 3 input variables and X, Y are the output variables. Here, input A has higher priority than input B and input B has higher priority than input C. The circuit also has Enable as the input. Implement the function using basic gates.\nInput Output\nEnable A B C X Y\n0 X X X 0 0\n1 0 0 0 0 0\n1 0 0 1 0 1\n1 0 1 X 1 0\n1 1 X X 1 1"}
{"instruction": "Generate a question for Unit 2: Arithmetic Circuits and Digital Logic Design. Topics include: Decoders, Multiplexers, Priority Encoders, Programmable Logic Arrays (PLAs), Implementing Boolean Functions using MUX and Decoder", "input": "", "output": "Realize the given 4-variable expression using 8-to-1 multiplexer as well as 4-to-1 multiplexer.\nf(w,x,y,z)= ?(2,5,6,7,9,12,13,15)"}
{"instruction": "Generate a question for Unit 2: Arithmetic Circuits and Digital Logic Design. Topics include: Decoders, Multiplexers, Priority Encoders, Programmable Logic Arrays (PLAs), Implementing Boolean Functions using MUX and Decoder", "input": "", "output": "Using OR and/or NOR gates along with 3-to-8 decoder to implement the following functions. The gates should be selected so as to minimize the number of inputs.\n i) f1(x,y,z)=?M(1,2,5)\nf2(x,y,z)= ?M (0,1,3,5,7)\nii) f1(x,y,z)= ?m(1,3)\nf2(x,y,z)= ?m (1,2,4,5,7)\nAssume all the 8 output lines of the decoder are active high signals."}
{"instruction": "Generate a question for Unit 2: Arithmetic Circuits and Digital Logic Design. Topics include: Decoders, Multiplexers, Priority Encoders, Programmable Logic Arrays (PLAs), Implementing Boolean Functions using MUX and Decoder", "input": "", "output": "Design a PLA 4x5x2 i.e 4 inputs, 5 AND gates and 2 OR gates for the following functions.\nf1(w,x,y,z)= ?m(2,4,5,10,12,13,14)\nf2(w,x,y,z)= ?m(2,9,10,11,13,14,15)"}
{"instruction": "Generate a question for Unit 2: Arithmetic Circuits and Digital Logic Design. Topics include: Decoders, Multiplexers, Priority Encoders, Programmable Logic Arrays (PLAs), Implementing Boolean Functions using MUX and Decoder", "input": "", "output": "Design the PROM for the following function.\nf1(x,y,z)= ?m(0,1,2,5,7)\nf2(x,y,z)= ?m(1,2,4,6)"}
{"instruction": "Generate a question for Unit 2: Arithmetic Circuits and Digital Logic Design. Topics include: Decoders, Multiplexers, Priority Encoders, Programmable Logic Arrays (PLAs), Implementing Boolean Functions using MUX and Decoder", "input": "", "output": "Explain Programmable Array Logic with a neat diagram."}
{"instruction": "Generate a question for Unit 2: Arithmetic Circuits and Digital Logic Design. Topics include: Decoders, Multiplexers, Priority Encoders, Programmable Logic Arrays (PLAs), Implementing Boolean Functions using MUX and Decoder", "input": "", "output": "Using OR and/or NOR gates along with 3-to-8 decoder to implement the following functions. The gates should be selected so as to minimize the number of inputs.\n i) f1(x,y,z)=?M(1,2,5)\nf2(x,y,z)= ?M (0,1,3,5,7)\nii) f1(x,y,z)= ?m(1,3)\nf2(x,y,z)= ?m (1,2,4,5,7)\nAssume all the 8 output lines of the decoder are active high signals."}
{"instruction": "Generate a question for Unit 2: Arithmetic Circuits and Digital Logic Design. Topics include: Decoders, Multiplexers, Priority Encoders, Programmable Logic Arrays (PLAs), Implementing Boolean Functions using MUX and Decoder", "input": "", "output": "Realize the given 4-variable expression using 8-to-1 multiplexer as well as 4-to-1 multiplexer.\nf(w,x,y,z)= ?(2,5,6,7,9,12,13,15)"}
{"instruction": "Generate a question for Unit 3: Sequential Circuits. Topics include: Flip Flops, Timing Diagrams, Registers, and Counters", "input": "", "output": "Explain the working of positive edge triggered JK flip flop with the help of a neat diagram. Also, demonstrate the timing diagram for the same."}
{"instruction": "Generate a question for Unit 3: Sequential Circuits. Topics include: Flip Flops, Timing Diagrams, Registers, and Counters", "input": "", "output": "Derive the characteristic equations for\n i) SR Flip Flop\n ii) D Flip Flop\n iii) JK Flip Flop\n iv) T Flip Flop\nAlso represent all the above flip flops using state transition diagram."}
{"instruction": "Generate a question for Unit 3: Sequential Circuits. Topics include: Flip Flops, Timing Diagrams, Registers, and Counters", "input": "", "output": "Differentiate Ring Counter and switched tail counter."}
{"instruction": "Generate a question for Unit 3: Sequential Circuits. Topics include: Flip Flops, Timing Diagrams, Registers, and Counters", "input": "", "output": "Demonstrate the working of serial-in, serial-out 4-bit shift register with the help of a neat diagram."}
{"instruction": "Generate a question for Unit 3: Sequential Circuits. Topics include: Flip Flops, Timing Diagrams, Registers, and Counters", "input": "", "output": "Design a 4 bit sequence detector using D Flip Flop to detect a pattern ‘1010’ in the input sequence."}
{"instruction": "Generate a question for Unit 3: Sequential Circuits. Topics include: Flip Flops, Timing Diagrams, Registers, and Counters", "input": "", "output": "With a neat diagram explain the working of SR Flip Flop realized using NAND gates."}
{"instruction": "Generate a question for Unit 3: Sequential Circuits. Topics include: Flip Flops, Timing Diagrams, Registers, and Counters", "input": "", "output": "List the different types of Registers. Explain Serial In Parallel Out with neat diagram."}
{"instruction": "Generate a question for Unit 3: Sequential Circuits. Topics include: Flip Flops, Timing Diagrams, Registers, and Counters", "input": "", "output": "Explain the working of Master-Slave JK flip flop with timing diagram."}
{"instruction": "Generate a question for Unit 3: Sequential Circuits. Topics include: Flip Flops, Timing Diagrams, Registers, and Counters", "input": "", "output": "Derive the characteristic equation for SR flip flop, JK flip flop and D flip flop."}
{"instruction": "Generate a question for Unit 4: Counters and Sequential Circuits. Topics include: Asynchronous and Synchronous Counters", "input": "", "output": "Design a 3 bit asynchronous up- down counter using JK Flip Flop."}
{"instruction": "Generate a question for Unit 4: Counters and Sequential Circuits. Topics include: Asynchronous and Synchronous Counters", "input": "", "output": "Design a synchronous mod-6 counter using JK flip-flops for the following counting sequence:\n000, 010, 011, 110, 101, 001 and then back to 000."}
{"instruction": "Generate a question for Unit 5: Design of Sequential Circuits. Topics include: Sequence Detectors, Counters, Synchronous Circuits", "input": "", "output": "Design a MOD-6 synchronous up counter using JK flip flop."}
{"instruction": "Generate a question for Unit 5: Design of Sequential Circuits. Topics include: Sequence Detectors, Counters, Synchronous Circuits", "input": "", "output": "Given the state transition diagram using Moore Model design the sequence detector that receives the binary data with the pattern ‘011’. Note: Consider data coming from Left to Right."}
{"instruction": "Generate a question for Unit 5: Design of Sequential Circuits. Topics include: Sequence Detectors, Counters, Synchronous Circuits", "input": "", "output": "Design a synchronous up counter using JK flip flop for the given sequence\n2,3,7,5,6,4."}
{"instruction": "Generate a question for Unit 5: Design of Sequential Circuits. Topics include: Sequence Detectors, Counters, Synchronous Circuits", "input": "", "output": "Design a sequence detector that receives binary data stream at its input X and signals when a combination ‘011’ arrives at the input by making its output Y high which otherwise remains low. Consider data coming from Left to Right i.e first bit to be identified is 1, second 1 and third 0 from the input sequence. Design the above sequence detector using Mealy Model."}
{"instruction": "Generate a question for Unit 5: Design of Sequential Circuits. Topics include: Sequence Detectors, Counters, Synchronous Circuits", "input": "", "output": "Design a synchronous sequential circuit using Moore Model for the sequence detector to detect 3 or more consecutive 1’s in the given sequence."}
{"instruction": "Generate a question for Unit 5: Design of Sequential Circuits. Topics include: Sequence Detectors, Counters, Synchronous Circuits", "input": "", "output": "Obtain the reduced state table for the state diagram given below using\n i) Row elimination method\n ii) Implication table method."}